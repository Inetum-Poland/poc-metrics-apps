# syntax=docker/dockerfile:1

# https://dev.to/sre_panchanan/deep-dive-into-multistage-dockerfile-with-a-golang-app-6e1

# Stage 1: Build Stage
# Use a specific version of the official Golang image as the base image
FROM golang:1.23.2 AS build

# Set the working directory inside the container
WORKDIR /app

# Copy only the go.mod file to install dependencies efficiently and leverage layer caching
ADD go.mod go.sum main.go internal/ ./

# Use cache mounts to speed up the installation of existing dependencies
# Compile the application during build and statically link the binary
# --mount=type=cache,target=/go/pkg/mod \
# --mount=type=cache,target=/root/.cache/go-build \
RUN \
  go mod tidy && \
  go mod download && \
  go build \
    -ldflags="-linkmode external -extldflags -static" \
    -tags netgo \
    -o out

# Stage 2: Deployable Image
# Use a minimal scratch image as the base image for the final image
FROM scratch

# Copy the compiled application binary from the build stage to the final image
COPY --from=build /app/out /out

# Expose the port the application will run on
EXPOSE 8080

# Define the command to run the application when the container starts
CMD ["./out"]
